<?xml version="1.0" encoding="UTF-8"?>
<functionModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.ibm.com/xmlns/prod/streams/spl/function" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/function functionModel.xsd">
  <functionSet>
    <headerFileName>eval_predicate.h</headerFileName>
    <cppNamespaceName>eval_predicate_functions</cppNamespaceName>
    <functions>
      <function>
        <description>
It evaluates a user defined rule (i.e. expression) represented as an rstring using the given tuple.
@param expr User defined rule (expression) to be evaluated i.e. processed. Type: rstring
@param myTuple A user defined tuple whose attributes the rule (expression) should refer to. Type: Tuple
@param error A mutable variable that will contain a non-zero error code if a rule processing error occurs. Type: int32
@param trace A boolean value to enable tracing inside this function. Type: boolean
@return It returns true when the rule evaluation i.e. processing is successful. Otherwise, it returns false.  Type: boolean
		</description>
        <prototype>&lt;tuple T> public boolean eval_predicate(rstring expr, T myTuple, mutable int32 error, boolean trace)</prototype>
      </function>
      
      <function>
        <description>
It fetches the value of a user given attribute name if it is present in the user given tuple.
@param attributeName A user given fully qualified attribute name. Type: rstring
@param myTuple A user defined tuple in which the user given attribute is present. Type: Tuple
@param value A mutable variable in which the value of a user given attribute will be returned. Type: An appropriate type
@param error A mutable variable that will contain a non-zero error code if an error occurs. Type: int32
@param trace A boolean value to enable tracing inside this function. Type: boolean
@return It returns nothing.  Type: void
		</description>
        <prototype>&lt;tuple T1, any T2> public void get_tuple_attribute_value(rstring attributeName, T1 myTuple, mutable T2 value, mutable int32 error, boolean trace)</prototype>
      </function>
      
      <function>
        <description>
It compares the attribute values of two tuples that are made of the same schema and returns a list containing the attribute names that have matching values and another list containing the attribute names that have differing values.
@param myTuple1 First of the two user given tuples to be compared. Type: Tuple
@param myTuple2 Second of the two user given tuples to be compared. Type: Tuple
@param matchingAttributes A mutable list variable that will contain the attribute names that have matching values. Type: list&lt;rstring&gt;
@param differingAttributes A mutable list variable that will contain the attribute names that have differing values. Type: list&lt;rstring&gt;
@param error A mutable variable that will contain a non-zero error code if an error occurs. Type: int32 
@param trace A boolean value to enable tracing inside this function. Type: boolean
@return It returns nothing.  Type: void
		</description>
        <prototype>&lt;tuple T1> public void compare_tuple_attributes(T1 myTuple1, T1 myTuple2, mutable list&lt;rstring&gt; matchingAttributes, mutable list&lt;rstring&gt; differingAttributes, mutable int32 error, boolean trace)</prototype>
      </function>
      
      <function>
        <description>
It fetches the schema literal string of a given tuple along with the information about all of its attributes.
@param myTuple A user defined tuple for which schema and attribute information will be obtained. Type: Tuple
@param schema A mutable variable in which the complete schema literal string of a given tuple will be returned. Type: rstring
@param attributeInfo A mutable map variable in which information about the tuple attributes will be returned. Map key will carry the fully qualified name of a given tuple attribute and map value will carry the SPL type name of that attribute. Type: map&lt;rstring, rstring&gt;
@param error A mutable variable that will contain a non-zero error code if an error occurs. Type: int32
@param trace A boolean value to enable tracing inside this function. Type: boolean
@return It returns nothing.  Type: void
	  </description>
	  <prototype>&lt;tuple T1> public void get_tuple_schema_and_attribute_info(T1 myTuple, mutable rstring schema, mutable map&lt;rstring, rstring&gt; attributeInfo, mutable int32 error, boolean trace)</prototype>
	</function>
    </functions>
    
    <dependencies>
       <library>
          <cmn:description/>
           <cmn:managedLibrary>
              <cmn:includePath>../../impl/include</cmn:includePath>
           </cmn:managedLibrary>
       </library>
    </dependencies>
    
  </functionSet>
</functionModel>
